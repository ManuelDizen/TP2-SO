Bootloader/BMFS/bmfs.c:239:2: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
 printf("%s\nDisk Size: %d MiB\n", diskname, disksize);
 ^
Bootloader/BMFS/bmfs.c:255:4: warning: %lld in format string (no. 2) requires 'long long' but the argument type is 'unsigned long long'. [invalidPrintfArgType_sint]
   printf("%-32s %20lld %20lld\n", entry.FileName, entry.FileSize, (entry.ReservedBlocks*2));
   ^
Bootloader/BMFS/bmfs.c:255:4: warning: %lld in format string (no. 3) requires 'long long' but the argument type is 'unsigned long long'. [invalidPrintfArgType_sint]
   printf("%-32s %20lld %20lld\n", entry.FileName, entry.FileSize, (entry.ReservedBlocks*2));
   ^
Bootloader/BMFS/bmfs.c:690:4: warning: %lld in format string (no. 1) requires 'long long' but the argument type is 'unsigned long long'. [invalidPrintfArgType_sint]
   printf("Cannot create file of size %lld MiB.\n", maxsize);
   ^
Bootloader/BMFS/bmfs.c:453:10: warning: Either the condition 'buffer==NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
  memset(buffer, 0, bufferSize);
         ^
Bootloader/BMFS/bmfs.c:429:14: note: Assuming that condition 'buffer==NULL' is not redundant
  if (buffer == NULL)
             ^
Bootloader/BMFS/bmfs.c:428:12: note: Assignment 'buffer=(char*)malloc(bufferSize)', assigned value is 0
  buffer = (char *) malloc(bufferSize);
           ^
Bootloader/BMFS/bmfs.c:453:10: note: Null pointer dereference
  memset(buffer, 0, bufferSize);
         ^
Bootloader/BMFS/bmfs.c:277:21: style: The scope of the variable 'writeSize' can be reduced. [variableScope]
 unsigned long long writeSize = 0;
                    ^
Bootloader/BMFS/bmfs.c:452:10: style: The scope of the variable 'percent' can be reduced. [variableScope]
  double percent;
         ^
Bootloader/BMFS/bmfs.c:726:8: style: The scope of the variable 'tfile' can be reduced. [variableScope]
 FILE *tfile;
       ^
Bootloader/BMFS/bmfs.c:727:6: style: The scope of the variable 'tint' can be reduced. [variableScope]
 int tint, slot;
     ^
Bootloader/BMFS/bmfs.c:758:8: style: The scope of the variable 'tfile' can be reduced. [variableScope]
 FILE *tfile;
       ^
Bootloader/BMFS/bmfs.c:759:6: style: The scope of the variable 'tint' can be reduced. [variableScope]
 int tint, slot;
     ^
Bootloader/BMFS/bmfs.c:159:9: style: Local variable 'filesize' shadows outer variable [shadowVariable]
    int filesize = atoi(argv[4]);
        ^
Bootloader/BMFS/bmfs.c:30:14: note: Shadowed declaration
unsigned int filesize, disksize;
             ^
Bootloader/BMFS/bmfs.c:159:9: note: Shadow variable
    int filesize = atoi(argv[4]);
        ^
Bootloader/BMFS/bmfs.c:614:6: style: Local variable 'slot' shadows outer variable [shadowVariable]
 int slot;
     ^
Bootloader/BMFS/bmfs.c:807:6: note: Shadowed declaration
 int slot;
     ^
Bootloader/BMFS/bmfs.c:614:6: note: Shadow variable
 int slot;
     ^
Bootloader/BMFS/bmfs.c:727:12: style: Local variable 'slot' shadows outer variable [shadowVariable]
 int tint, slot;
           ^
Bootloader/BMFS/bmfs.c:807:6: note: Shadowed declaration
 int slot;
     ^
Bootloader/BMFS/bmfs.c:727:12: note: Shadow variable
 int tint, slot;
           ^
Bootloader/BMFS/bmfs.c:759:12: style: Local variable 'slot' shadows outer variable [shadowVariable]
 int tint, slot;
           ^
Bootloader/BMFS/bmfs.c:807:6: note: Shadowed declaration
 int slot;
     ^
Bootloader/BMFS/bmfs.c:759:12: note: Shadow variable
 int tint, slot;
           ^
Bootloader/BMFS/bmfs.c:806:7: style: Local variable 'delmarker' shadows outer variable [shadowVariable]
 char delmarker = 0x01;
      ^
Bootloader/BMFS/bmfs.c:806:7: note: Shadowed declaration
 char delmarker = 0x01;
      ^
Bootloader/BMFS/bmfs.c:806:7: note: Shadow variable
 char delmarker = 0x01;
      ^
Bootloader/BMFS/bmfs.c:807:6: style: Local variable 'slot' shadows outer variable [shadowVariable]
 int slot;
     ^
Bootloader/BMFS/bmfs.c:807:6: note: Shadowed declaration
 int slot;
     ^
Bootloader/BMFS/bmfs.c:807:6: note: Shadow variable
 int slot;
     ^
Kernel/kernel.c:57:30: error: Subtracting pointers that point to different objects [comparePointers]
 clearBSS(&bss, &endOfKernel - &bss);
                             ^
Kernel/kernel.c:24:16: note: Variable declared here.
extern uint8_t endOfKernel;
               ^
Kernel/kernel.c:57:17: note: Address of variable taken here.
 clearBSS(&bss, &endOfKernel - &bss);
                ^
Kernel/kernel.c:22:16: note: Variable declared here.
extern uint8_t bss;
               ^
Kernel/kernel.c:57:32: note: Address of variable taken here.
 clearBSS(&bss, &endOfKernel - &bss);
                               ^
Kernel/kernel.c:57:30: note: Subtracting pointers that point to different objects
 clearBSS(&bss, &endOfKernel - &bss);
                             ^
Toolchain/ModulePacker/main.c:114:6: style: The scope of the variable 'read' can be reduced. [variableScope]
 int read;
     ^
Toolchain/ModulePacker/main.c:75:9: style: Local variable 'source' shadows outer variable [shadowVariable]
  FILE *source = fopen(fileArray.array[i], "r");
        ^
Toolchain/ModulePacker/main.c:65:8: note: Shadowed declaration
 FILE *source = fopen(fileArray.array[0], "r");
       ^
Toolchain/ModulePacker/main.c:75:9: note: Shadow variable
  FILE *source = fopen(fileArray.array[i], "r");
        ^
Userland/SampleCodeModule/_loader.c:23:22: style:inconclusive: Function 'memset' argument 1 names different: declaration 'destiny' definition 'destiation'. [funcArgNamesDifferent]
void * memset(void * destiation, int32_t c, uint64_t length) {
                     ^
Userland/SampleCodeModule/_loader.c:12:22: note: Function 'memset' argument 1 names different: declaration 'destiny' definition 'destiation'.
void * memset(void * destiny, int32_t c, uint64_t length);
                     ^
Userland/SampleCodeModule/_loader.c:23:22: note: Function 'memset' argument 1 names different: declaration 'destiny' definition 'destiation'.
void * memset(void * destiation, int32_t c, uint64_t length) {
                     ^
Userland/SampleCodeModule/_loader.c:16:31: error: Subtracting pointers that point to different objects [comparePointers]
 memset(&bss, 0, &endOfBinary - &bss);
                              ^
Userland/SampleCodeModule/_loader.c:8:13: note: Variable declared here.
extern char endOfBinary;
            ^
Userland/SampleCodeModule/_loader.c:16:18: note: Address of variable taken here.
 memset(&bss, 0, &endOfBinary - &bss);
                 ^
Userland/SampleCodeModule/_loader.c:7:13: note: Variable declared here.
extern char bss;
            ^
Userland/SampleCodeModule/_loader.c:16:33: note: Address of variable taken here.
 memset(&bss, 0, &endOfBinary - &bss);
                                ^
Userland/SampleCodeModule/_loader.c:16:31: note: Subtracting pointers that point to different objects
 memset(&bss, 0, &endOfBinary - &bss);
                              ^

// Análisis de las observaciones:
//  Hasta acá, todas las correcciones son en base a archivos prebuilt, por lo que preferimos
//  no modificar nada de lo escrito.

Userland/SampleCodeModule/libraries/stdlib.c:120:12: error: Returning pointer to local variable 'retString' that will be invalid when returning. [returnDanglingLifetime]
    return retString;
           ^
Userland/SampleCodeModule/libraries/stdlib.c:120:12: note: Array decayed to pointer here.
    return retString;
           ^
Userland/SampleCodeModule/libraries/stdlib.c:118:10: note: Variable created here.
    char retString[buffSize];
         ^
Userland/SampleCodeModule/libraries/stdlib.c:120:12: note: Returning pointer to local variable 'retString' that will be invalid when returning.
    return retString;
           ^

// Este error me genera dudas. ¿Por qué si devuelvo un puntero a una variable local es peligroso?
// ¿No se encarga C de mantener la referencia? ¿Por que existe un riesgo de pisar la variable?

Userland/SampleCodeModule/misc/commands.c:223:19: error: Division by zero. [zerodiv]
    int prueba = 1/0;
                  ^
Userland/SampleCodeModule/misc/commands.c:223:16: style: Variable 'prueba' is assigned a value that is never used. [unreadVariable]
    int prueba = 1/0;
               ^
// Intencional

Userland/SampleCodeModule/shell.c:122:10: style: Unused variable: buff [unusedVariable]
    char buff[MAXLEN]; // Nota: Esta declaración no aporta nada al código. Sin embargo, sacarla
         ^
// Quizás lo mas insólito de todo el trabajo. Este arreglo quedo como basura luego de hacer algunas pruebas,
// pero si lo remuevo no me permite leer los índices.

Userland/SampleCodeModule/tests/test_mm.c:22:11: style: The scope of the variable 'rq' can be reduced. [variableScope]
  uint8_t rq;
          ^
Userland/SampleCodeModule/tests/test_mm.c:23:12: style: The scope of the variable 'total' can be reduced. [variableScope]
  uint32_t total;
           ^
Userland/SampleCodeModule/tests/test_sync.c:75:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
Userland/SampleCodeModule/tests/test_sync.c:139:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
// Es un error mínimo, y no es claro como el scope se puede reducir.

Userland/SampleCodeModule/tests/test_sync.c:117:12: style: Local variable 'i' shadows outer variable [shadowVariable]
  for (int i = 0; i < TOTAL_PAIR_PROCESSES*2; i++)
           ^
Userland/SampleCodeModule/tests/test_sync.c:66:12: note: Shadowed declaration
  uint64_t i;
           ^
Userland/SampleCodeModule/tests/test_sync.c:117:12: note: Shadow variable
  for (int i = 0; i < TOTAL_PAIR_PROCESSES*2; i++)
           ^
Userland/SampleCodeModule/tests/test_sync.c:157:12: style: Local variable 'i' shadows outer variable [shadowVariable]
  for (int i = 0; i < TOTAL_PAIR_PROCESSES*2 - 1; i++)
           ^
Userland/SampleCodeModule/tests/test_sync.c:131:12: note: Shadowed declaration
  uint64_t i;
           ^
Userland/SampleCodeModule/tests/test_sync.c:157:12: note: Shadow variable
  for (int i = 0; i < TOTAL_PAIR_PROCESSES*2 - 1; i++)
           ^
Userland/SampleCodeModule/_loader.c:14:0: style: The function '_start' is never used. [unusedFunction]

// Si se utiliza, en ASM

Kernel/prebuilt/exceptions.c:13:0: style: The function 'exceptionDispatcher' is never used. [unusedFunction]

// Si se utiliza, en ASM

Kernel/kernel.c:48:0: style: The function 'initializeKernelBinary' is never used. [unusedFunction]

// Si se utiliza, en ASM

Kernel/prebuilt/irqDispatcher.c:17:0: style: The function 'irqDispatcher' is never used. [unusedFunction]

// Si se utiliza, en ASM

Kernel/prebuilt/naiveConsole.c:114:0: style: The function 'ncPrintBin' is never used. [unusedFunction]

// Es prebuilt, no la voy a tocar

Kernel/sync/semaphores.c:137:0: style: The function 'printBlockedPIDsForSem' is never used. [unusedFunction]

^
Userland/SampleCodeModule/libraries/stdlib.c:37:0: style: The function 'scanf' is never used. [unusedFunction]

// Es una prebuilt del trabajo de arqui, consideramos innecesario borrarla

Kernel/sync/schedule.c:79:0: style: The function 'scheduler' is never used. [unusedFunction]

// Si se utiliza, en ASM

Kernel/prebuilt/sysCallDispatcher.c:23:0: style: The function 'sysCallDispatcher' is never used. [unusedFunction]

// Si se utiliza, en ASM

nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

